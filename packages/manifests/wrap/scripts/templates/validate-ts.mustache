/* eslint-disable */
/**
 * This file was automatically generated by scripts/manifest/validate-ts.mustache.
 * DO NOT MODIFY IT BY HAND. Instead, modify scripts/manifest/validate-ts.mustache,
 * and run node ./scripts/manifest/generateFormatTypes.js to regenerate this file.
 */
import {
  AnyWrapManifest,
  WrapManifestVersions,
  {{#formats}}
  WrapManifestSchema_{{tsVersion}}
  {{/formats}}
} from ".";
{{#validators.length}}import * as Validators from "../validators";{{/validators.length}}

import Ajv, { Schema } from "ajv";

const ajv = new Ajv({ strict: false });

type WrapManifestSchemas = {
  [key in WrapManifestVersions]: Schema | undefined
};

const schemas: WrapManifestSchemas = {
  // NOTE: Patch fix for backwards compatability
  "0.1.0": WrapManifestSchema_0_1,
  {{#formats}}
  "{{version}}": WrapManifestSchema_{{tsVersion}},
  {{/formats}}
};

{{#validators}}
Validator.prototype.{{.}} = Validators.{{.}};
{{/validators}}

function runValidation(
  schema: Schema,
  manifest: AnyWrapManifest
): void {
  const version = manifest.version;
  const validate = ajv.compile(schema);
  const valid = validate(manifest);

  if (!valid) {
    throw new Error([
      `Validation errors encountered while sanitizing WrapManifest version ${version}`,
      ...((validate as any).errors as unknown[]).map((x) => JSON.stringify(x, null, 2))
    ].join("\n"));
  }
}

export function validateWrapManifest(
  manifest: AnyWrapManifest,
  extSchema: Schema | undefined = undefined
): void {
  const schema = schemas[manifest.version as WrapManifestVersions];

  if (!schema) {
    throw new Error(`Unrecognized WrapManifest schema version "${manifest.version}"\nmanifest: ${JSON.stringify(manifest, null, 2)}`);
  }

  runValidation(schema, manifest);

  if (extSchema) {
    runValidation(extSchema, manifest);
  }
}
