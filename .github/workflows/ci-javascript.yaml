name: CI-JavaScript

on:
  push:
    branches:
      - origin
      - origin-dev
  pull_request:

jobs:
  Lint-and-Build:
    runs-on: ubuntu-latest
    timeout-minutes: 60
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Read .nvmrc
        run: echo ::set-output name=NVMRC::$(cat .nvmrc)
        id: nvm

      - name: Setup Node.js
        uses: actions/setup-node@master
        with:
          node-version: '${{ steps.nvm.outputs.NVMRC }}'

      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"

      - uses: actions/cache@v2
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: Install dependencies
        run: (yarn install --nonInteractive --frozen-lockfile --prefer-offline || yarn install --nonInteractive --frozen-lockfile --prefer-offline)

      - name: Lint
        run: yarn run lint:ci

      - name: Build
        run: yarn build

  Build-Docs:
    runs-on: ubuntu-latest
    timeout-minutes: 60
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Read .nvmrc
        run: echo ::set-output name=NVMRC::$(cat .nvmrc)
        id: nvm

      - name: Setup Node.js
        uses: actions/setup-node@master
        with:
          node-version: '${{ steps.nvm.outputs.NVMRC }}'

      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"

      - uses: actions/cache@v2
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: Install dependencies
        run: (yarn install --nonInteractive --frozen-lockfile --prefer-offline || yarn install --nonInteractive --frozen-lockfile --prefer-offline)

      - name: Build
        run: yarn build

      - name: Build docs
        run: yarn build:docs

  CI-WRAP-Test-Harness:
    uses: ./.github/workflows/ci-wrap-test-harness.yaml

  Test:
    runs-on: ubuntu-latest
    needs: CI-WRAP-Test-Harness
    timeout-minutes: 60
    if: ${{ always() }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Read .nvmrc
        run: echo ::set-output name=NVMRC::$(cat .nvmrc)
        id: nvm

      - name: Setup Node.js
        uses: actions/setup-node@master
        with:
          node-version: '${{ steps.nvm.outputs.NVMRC }}'

      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"

      - uses: actions/cache@v2
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: Install dependencies
        run: (yarn install --nonInteractive --frozen-lockfile --prefer-offline || yarn install --nonInteractive --frozen-lockfile --prefer-offline)

      - name: Build
        run: yarn build

      - name: Get updated wrappers
        if: ${{ needs.CI-WRAP-Test-Harness.outputs.rebuild_required == 'true' }}
        uses: actions/download-artifact@v3
        id: get-wrappers
        with:
          name: rebuilt-wrappers
          path: ./wrappers

      - if: ${{ needs.CI-WRAP-Test-Harness.outputs.rebuild_required == 'true' }}
        run: |
          rm -rf packages/test-cases/wrappers
          mv wrappers packages/test-cases

      - name: Test
        run: yarn test
